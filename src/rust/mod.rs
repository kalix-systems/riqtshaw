//! `rust` is the module that generates the rust code for the binding

use crate::configuration::*;
use crate::util::{snake_case, write_if_different};
use std::io::{Result, Write};

mod c_ffi;
mod emitter;
mod model;
mod trait_;
mod util;
mod write;

use emitter::*;
use model::*;
use trait_::*;
use util::*;
use write::*;

pub fn write_interface(conf: &Config) -> Result<()> {
    let mut r = Vec::new();

    writeln!(
        r,
        "
/* generated by riqtshaw */
use riqtshaw_types::*;

use crate::{}::*;",
        conf.rust.implementation_module
    )?;

    for object in conf.objects.values() {
        write_rust_interface_object(&mut r, object)?;
    }

    let mut file = conf
        .out_dir
        .join(&conf.rust.dir)
        .join("src")
        .join(&conf.rust.interface_module);

    file.set_extension("rs");
    write_if_different(file, &r)
}
