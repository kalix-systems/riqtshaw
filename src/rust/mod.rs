//! `rust` is the module that generates the rust code for the binding

use crate::configuration::*;
use crate::configuration_private::*;
use crate::util::{snake_case, write_if_different};
use std::io::{Result, Write};

mod util;
use util::*;

mod write_helper;
use write_helper::*;

mod write;
use write::*;

pub fn write_interface(conf: &Config) -> Result<()> {
    let mut r = Vec::new();
    writeln!(
        r,
        "
/* generated by rust_qt_binding_generator */
use riqtshaw_types::*;

use {}{}::*;",
        get_module_prefix(conf),
        conf.rust.implementation_module
    )?;

    for object in conf.objects.values() {
        write_rust_interface_object(&mut r, object, conf)?;
    }

    let mut file = conf
        .out_dir
        .join(&conf.rust.dir)
        .join("src")
        .join(&conf.rust.interface_module);

    file.set_extension("rs");
    write_if_different(file, &r)
}

/// Inspects the rust edition of the target crate to decide how the module
/// imports should be written.
///
/// As of Rust 2018, modules inside the crate should be prefixed with `crate::`.
/// Prior to the 2018 edition, crate-local modules could be imported without
/// this prefix.
fn get_module_prefix(conf: &Config) -> &'static str {
    match conf.rust_edition {
        RustEdition::Rust2018 => "crate::",
        _ => "",
    }
}
