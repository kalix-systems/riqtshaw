use super::*;
mod item_model;
mod object;

/// Entry point for producing the
/// generated C++ header code
pub fn write_header(conf: &Config) -> Result<()> {
    let mut h_file = conf.out_dir.join(&conf.cpp_file);

    h_file.set_extension("h");

    let mut header_buf = Vec::new();

    let guard = h_file
        .file_name()
        .unwrap()
        .to_string_lossy()
        .replace(".", "_")
        .to_uppercase();

    guard_scope(&mut header_buf, &guard, conf, |header_buf, conf| {
        for name in conf.objects.keys() {
            write_type_def(header_buf, name)?;
        }

        for object in conf.objects.values() {
            write_header_object(header_buf, object, conf)?;
        }

        Ok(())
    })?;

    write_if_different(h_file, &header_buf)?;

    Ok(())
}

fn write_header_object(header_buf: &mut Vec<u8>, obj: &Object, conf: &Config) -> Result<()> {
    object::qobject_block(header_buf, obj, conf, |header_buf, obj, conf| {
        object::register_friend_classes(header_buf, conf, obj)?;

        writeln!(header_buf, "public: class Private;")?;

        object::private_properties(header_buf, obj)?;

        object::public_properties(header_buf, obj)?;

        object::functions(header_buf, obj)?;

        match obj.object_type {
            ObjectType::Object => {}
            ObjectType::List | ObjectType::Tree => {
                item_model::write_header_item_model(header_buf, obj)?;
            }
        }

        object::qsignals(header_buf, obj)?;

        Ok(())
    })?;

    Ok(())
}

fn write_type_def(header_buf: &mut Vec<u8>, name: &str) -> Result<()> {
    writeln!(
        header_buf,
        "
class {name};
typedef {name}* {name}Ref;
Q_DECLARE_METATYPE({name}Ref);
         ",
        name = name
    )?;

    Ok(())
}

fn guard_scope<F: Fn(&mut Vec<u8>, &Config) -> Result<()>>(
    header_buf: &mut Vec<u8>,
    guard: &str,
    conf: &Config,
    content: F,
) -> Result<()> {
    writeln!(
        header_buf,
        "
/* generated by riqtshaw */
#ifndef {guard}
#define {guard}

#include <QtCore/QObject>
#include <QtCore/QAbstractItemModel>
",
        guard = guard
    )?;

    content(header_buf, conf)?;

    writeln!(header_buf, "#endif // {guard}", guard = guard)?;

    Ok(())
}
